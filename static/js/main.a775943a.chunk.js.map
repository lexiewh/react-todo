{"version":3,"sources":["components/TodoItem.js","todosData.js","App.js","index.js"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","handleChange","id","style","fontStyle","color","textDecoration","text","todosData","App","state","todos","bind","this","setState","prevState","map","todo","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iUAmBeA,MAhBf,SAAkBC,GAOhB,OACE,yBAAKC,UAAU,aACb,2BAAOC,KAAK,WAAWC,QAASH,EAAMI,KAAKC,UAC3CC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAC9C,uBAAGC,MAAOT,EAAMI,KAAKC,UAVH,CACpBK,UAAW,SACXC,MAAO,UACPC,eAAgB,gBAOmC,MAAOZ,EAAMI,KAAKS,QCc1DC,EA5BG,CACd,CACIN,GAAI,EACJK,KAAM,qBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,WACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mCACNR,WAAW,ICfEU,E,YACnB,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CACXC,MAAOH,GAGT,EAAKP,aAAe,EAAKA,aAAaW,KAAlB,gBANH,E,0EASNV,GACXW,KAAKC,UAAS,SAAAC,GAUZ,MAAO,CACLJ,MAVmBI,EAAUJ,MAAMK,KAAI,SAAAC,GACvC,OAAIA,EAAKf,KAAOA,EACP,eACFe,EADL,CAEElB,WAAYkB,EAAKlB,YAGdkB,W,+BAQH,IAAD,OACDN,EAAQE,KAAKH,MAAMC,MAAMK,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAUC,IAAKD,EAAKf,GAAIJ,KAAMmB,EACvEhB,aAAc,EAAKA,kBAErB,OACE,yBAAKN,UAAU,WACZgB,O,GAjCwBQ,IAAMC,WCJvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a775943a.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/TodoItem.css'\n\nfunction TodoItem(props) {\n  const completedItem = {\n    fontStyle: \"italic\",\n    color: \"#cdcdcd\",\n    textDecoration: \"line-through\"\n  }\n\n  return (\n    <div className=\"todo-item\">\n      <input type=\"checkbox\" checked={props.item.completed}\n      onChange={() => props.handleChange(props.item.id)}/>\n      <p style={props.item.completed ? completedItem : null}>{props.item.text}</p>\n    </div>\n  )\n}\n\nexport default TodoItem\n","const todosData = [\n    {\n        id: 1,\n        text: \"Take out the trash\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean gecko tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Arrested Development\",\n        completed: false\n    }\n]\n\nexport default todosData\n","import React from 'react';\nimport './stylesheets/App.css';\n\n// Components\nimport TodoItem from './components/TodoItem'\n\n// To do data\nimport todosData from './todosData'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      todos: todosData\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        }\n        return todo\n      })\n      return {\n        todos: updatedTodos\n      }\n    })\n  }\n\n  render() {\n    const todos = this.state.todos.map(todo => <TodoItem key={todo.id} item={todo}\n      handleChange={this.handleChange}/>)\n\n    return(\n      <div className=\"content\">\n        {todos}\n      </div>\n    )\n  }\n\n}\n\n\n// General notes:\n// - props is an object\n// - use curly braces around JS in JSX\n// - props can be \"nested\". a prop can be an object\n// - display logic goes after render but before return\n//    - display logic: what shows on the page\n// - state: data that the constructor maintains\n// - event handling: user interaction\n// - use setState any time you want to change the state\n//    - new version of state (need to use {} in the setState())\n//    - every time a function deals with state you have to bind it in the\n//    constructor\n//    - to get the last version of state use setState and a function with\n//    prevState\n// - componentDidMount() -> GET the data I need to be displayed\n// - shouldComponentUpdate() -> way to decide if a component should update or not\n// - componentWillUnmount() -> cleanup, remove event listeners\n// - conditional rendering: load something on the screen if this is true\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}